class CaptchaPage:
    html="""PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9InpoLWNuIj4KPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI+CiAgICA8dGl0bGU+Q2FwdGNoYTwvdGl0bGU+CiAgICA8c3R5bGU+CiAgICAgICAgYm9keSwKICAgICAgICBodG1sIHsKICAgICAgICAgICAgbWFyZ2luOiAwOwogICAgICAgICAgICBwYWRkaW5nOiAwOwogICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiAiUGluZ0ZhbmdTQy1SZWd1bGFyIiwgIk9wZW4gU2FucyIsIEFyaWFsLCAiSGlyYWdpbm8gU2FucyBHQiIsICJNaWNyb3NvZnQgWWFIZWkiLCAiU1RIZWl0aSIsICJXZW5RdWFuWWkgTWljcm8gSGVpIiwgU2ltU3VuLCBzYW5zLXNlcmlmOwogICAgICAgIH0KCiAgICAgICAgYm9keSB7CiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgICAgIH0KCiAgICAgICAgI2NhcHRjaGEgewogICAgICAgICAgICB3aWR0aDogMzAwcHg7CiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgICAgICB9CgogICAgICAgICN3YWl0IHsKICAgICAgICAgICAgaGVpZ2h0OiA0MnB4OwogICAgICAgICAgICB3aWR0aDogMjk4cHg7CiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMnB4OwogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjNGM0YzOwogICAgICAgIH0KCiAgICAgICAgLmxvYWRpbmcgewogICAgICAgICAgICBtYXJnaW46IGF1dG87CiAgICAgICAgICAgIHdpZHRoOiA3MHB4OwogICAgICAgICAgICBoZWlnaHQ6IDIwcHg7CiAgICAgICAgfQoKICAgICAgICAubG9hZGluZy1kb3QgewogICAgICAgICAgICBmbG9hdDogbGVmdDsKICAgICAgICAgICAgd2lkdGg6IDhweDsKICAgICAgICAgICAgaGVpZ2h0OiA4cHg7CiAgICAgICAgICAgIG1hcmdpbjogMThweCA0cHg7CiAgICAgICAgICAgIGJhY2tncm91bmQ6ICNjY2M7CgogICAgICAgICAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDUwJTsKICAgICAgICAgICAgLW1vei1ib3JkZXItcmFkaXVzOiA1MCU7CiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTsKCiAgICAgICAgICAgIG9wYWNpdHk6IDA7CgogICAgICAgICAgICAtd2Via2l0LWJveC1zaGFkb3c6IDAgMCAycHggYmxhY2s7CiAgICAgICAgICAgIC1tb3otYm94LXNoYWRvdzogMCAwIDJweCBibGFjazsKICAgICAgICAgICAgLW1zLWJveC1zaGFkb3c6IDAgMCAycHggYmxhY2s7CiAgICAgICAgICAgIC1vLWJveC1zaGFkb3c6IDAgMCAycHggYmxhY2s7CiAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgMCAycHggYmxhY2s7CgogICAgICAgICAgICAtd2Via2l0LWFuaW1hdGlvbjogbG9hZGluZ0ZhZGUgMXMgaW5maW5pdGU7CiAgICAgICAgICAgIC1tb3otYW5pbWF0aW9uOiBsb2FkaW5nRmFkZSAxcyBpbmZpbml0ZTsKICAgICAgICAgICAgYW5pbWF0aW9uOiBsb2FkaW5nRmFkZSAxcyBpbmZpbml0ZTsKICAgICAgICB9CgogICAgICAgIC5sb2FkaW5nLWRvdDpudGgtY2hpbGQoMSkgewogICAgICAgICAgICAtd2Via2l0LWFuaW1hdGlvbi1kZWxheTogMHM7CiAgICAgICAgICAgIC1tb3otYW5pbWF0aW9uLWRlbGF5OiAwczsKICAgICAgICAgICAgYW5pbWF0aW9uLWRlbGF5OiAwczsKICAgICAgICB9CgogICAgICAgIC5sb2FkaW5nLWRvdDpudGgtY2hpbGQoMikgewogICAgICAgICAgICAtd2Via2l0LWFuaW1hdGlvbi1kZWxheTogMC4xczsKICAgICAgICAgICAgLW1vei1hbmltYXRpb24tZGVsYXk6IDAuMXM7CiAgICAgICAgICAgIGFuaW1hdGlvbi1kZWxheTogMC4xczsKICAgICAgICB9CgogICAgICAgIC5sb2FkaW5nLWRvdDpudGgtY2hpbGQoMykgewogICAgICAgICAgICAtd2Via2l0LWFuaW1hdGlvbi1kZWxheTogMC4yczsKICAgICAgICAgICAgLW1vei1hbmltYXRpb24tZGVsYXk6IDAuMnM7CiAgICAgICAgICAgIGFuaW1hdGlvbi1kZWxheTogMC4yczsKICAgICAgICB9CgogICAgICAgIC5sb2FkaW5nLWRvdDpudGgtY2hpbGQoNCkgewogICAgICAgICAgICAtd2Via2l0LWFuaW1hdGlvbi1kZWxheTogMC4zczsKICAgICAgICAgICAgLW1vei1hbmltYXRpb24tZGVsYXk6IDAuM3M7CiAgICAgICAgICAgIGFuaW1hdGlvbi1kZWxheTogMC4zczsKICAgICAgICB9CgogICAgICAgIEAtd2Via2l0LWtleWZyYW1lcyBsb2FkaW5nRmFkZSB7CiAgICAgICAgICAgIDAlIHsKICAgICAgICAgICAgICAgIG9wYWNpdHk6IDA7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIDUwJSB7CiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLjg7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIDEwMCUgewogICAgICAgICAgICAgICAgb3BhY2l0eTogMDsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgQC1tb3ota2V5ZnJhbWVzIGxvYWRpbmdGYWRlIHsKICAgICAgICAgICAgMCUgewogICAgICAgICAgICAgICAgb3BhY2l0eTogMDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgNTAlIHsKICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuODsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgMTAwJSB7CiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBAa2V5ZnJhbWVzIGxvYWRpbmdGYWRlIHsKICAgICAgICAgICAgMCUgewogICAgICAgICAgICAgICAgb3BhY2l0eTogMDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgNTAlIHsKICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuODsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgMTAwJSB7CiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgPC9zdHlsZT4KPC9oZWFkPgoKPGJvZHk+CiAgICA8ZGl2IGlkPSJjYXB0Y2hhIj4KICAgICAgICA8ZGl2IGlkPSJ3YWl0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibG9hZGluZyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsb2FkaW5nLWRvdCI+PC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsb2FkaW5nLWRvdCI+PC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsb2FkaW5nLWRvdCI+PC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsb2FkaW5nLWRvdCI+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+Cgo8L2JvZHk+CjxzY3JpcHQ+CiAgICAidjAuNC44IEdlZXRlc3QgSW5jLiI7CgogICAgKGZ1bmN0aW9uICh3aW5kb3cpIHsKICAgICAgICAidXNlIHN0cmljdCI7CiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignR2VldGVzdCByZXF1aXJlcyBicm93c2VyIGVudmlyb25tZW50Jyk7CiAgICAgICAgfQoKICAgICAgICB2YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7CiAgICAgICAgdmFyIE1hdGggPSB3aW5kb3cuTWF0aDsKICAgICAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJoZWFkIilbMF07CgogICAgICAgIGZ1bmN0aW9uIF9PYmplY3Qob2JqKSB7CiAgICAgICAgICAgIHRoaXMuX29iaiA9IG9iajsKICAgICAgICB9CgogICAgICAgIF9PYmplY3QucHJvdG90eXBlID0gewogICAgICAgICAgICBfZWFjaDogZnVuY3Rpb24gKHByb2Nlc3MpIHsKICAgICAgICAgICAgICAgIHZhciBfb2JqID0gdGhpcy5fb2JqOwogICAgICAgICAgICAgICAgZm9yICh2YXIgayBpbiBfb2JqKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKF9vYmouaGFzT3duUHJvcGVydHkoaykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2VzcyhrLCBfb2JqW2tdKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIGZ1bmN0aW9uIENvbmZpZyhjb25maWcpIHsKICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICAgICAgICBuZXcgX09iamVjdChjb25maWcpLl9lYWNoKGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7CiAgICAgICAgICAgICAgICBzZWxmW2tleV0gPSB2YWx1ZTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBDb25maWcucHJvdG90eXBlID0gewogICAgICAgICAgICBhcGlfc2VydmVyOiAnYXBpLmdlZXRlc3QuY29tJywKICAgICAgICAgICAgcHJvdG9jb2w6ICdodHRwOi8vJywKICAgICAgICAgICAgdHlwZVBhdGg6ICcvZ2V0dHlwZS5waHAnLAogICAgICAgICAgICBmYWxsYmFja19jb25maWc6IHsKICAgICAgICAgICAgICAgIHNsaWRlOiB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljX3NlcnZlcnM6IFsic3RhdGljLmdlZXRlc3QuY29tIiwgImRuLXN0YXRpY2Rvd24ucWJveC5tZSJdLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzbGlkZScsCiAgICAgICAgICAgICAgICAgICAgc2xpZGU6ICcvc3RhdGljL2pzL2dlZXRlc3QuMC4wLjAuanMnCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZnVsbHBhZ2U6IHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNfc2VydmVyczogWyJzdGF0aWMuZ2VldGVzdC5jb20iLCAiZG4tc3RhdGljZG93bi5xYm94Lm1lIl0sCiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Z1bGxwYWdlJywKICAgICAgICAgICAgICAgICAgICBmdWxscGFnZTogJy9zdGF0aWMvanMvZnVsbHBhZ2UuMC4wLjAuanMnCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIF9nZXRfZmFsbGJhY2tfY29uZmlnOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgICAgICAgICAgICBpZiAoaXNTdHJpbmcoc2VsZi50eXBlKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmZhbGxiYWNrX2NvbmZpZ1tzZWxmLnR5cGVdOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzZWxmLm5ld19jYXB0Y2hhKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuZmFsbGJhY2tfY29uZmlnLmZ1bGxwYWdlOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5mYWxsYmFja19jb25maWcuc2xpZGU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIF9leHRlbmQ6IGZ1bmN0aW9uIChvYmopIHsKICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgICAgICAgICAgIG5ldyBfT2JqZWN0KG9iaikuX2VhY2goZnVuY3Rpb24gKGtleSwgdmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICBzZWxmW2tleV0gPSB2YWx1ZTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHZhciBpc051bWJlciA9IGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgICByZXR1cm4gKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpOwogICAgICAgIH07CiAgICAgICAgdmFyIGlzU3RyaW5nID0gZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICAgIHJldHVybiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyk7CiAgICAgICAgfTsKICAgICAgICB2YXIgaXNCb29sZWFuID0gZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICAgIHJldHVybiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpOwogICAgICAgIH07CiAgICAgICAgdmFyIGlzT2JqZWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICAgIHJldHVybiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCk7CiAgICAgICAgfTsKICAgICAgICB2YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgICByZXR1cm4gKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyk7CiAgICAgICAgfTsKICAgICAgICB2YXIgTU9CSUxFID0gL01vYmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpOwogICAgICAgIHZhciBwdCA9IE1PQklMRSA/IDMgOiAwOwoKICAgICAgICB2YXIgY2FsbGJhY2tzID0ge307CiAgICAgICAgdmFyIHN0YXR1cyA9IHt9OwoKICAgICAgICB2YXIgbm93RGF0ZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpOwogICAgICAgICAgICB2YXIgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTsKICAgICAgICAgICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRNb250aCgpICsgMTsKICAgICAgICAgICAgdmFyIGRheSA9IGRhdGUuZ2V0RGF0ZSgpOwogICAgICAgICAgICB2YXIgaG91cnMgPSBkYXRlLmdldEhvdXJzKCk7CiAgICAgICAgICAgIHZhciBtaW51dGVzID0gZGF0ZS5nZXRNaW51dGVzKCk7CiAgICAgICAgICAgIHZhciBzZWNvbmRzID0gZGF0ZS5nZXRTZWNvbmRzKCk7CgogICAgICAgICAgICBpZiAobW9udGggPj0gMSAmJiBtb250aCA8PSA5KSB7CiAgICAgICAgICAgICAgICBtb250aCA9ICcwJyArIG1vbnRoOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChkYXkgPj0gMCAmJiBkYXkgPD0gOSkgewogICAgICAgICAgICAgICAgZGF5ID0gJzAnICsgZGF5OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChob3VycyA+PSAwICYmIGhvdXJzIDw9IDkpIHsKICAgICAgICAgICAgICAgIGhvdXJzID0gJzAnICsgaG91cnM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKG1pbnV0ZXMgPj0gMCAmJiBtaW51dGVzIDw9IDkpIHsKICAgICAgICAgICAgICAgIG1pbnV0ZXMgPSAnMCcgKyBtaW51dGVzOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChzZWNvbmRzID49IDAgJiYgc2Vjb25kcyA8PSA5KSB7CiAgICAgICAgICAgICAgICBzZWNvbmRzID0gJzAnICsgc2Vjb25kczsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgY3VycmVudGRhdGUgPSB5ZWFyICsgJy0nICsgbW9udGggKyAnLScgKyBkYXkgKyAiICIgKyBob3VycyArICI6IiArIG1pbnV0ZXMgKyAiOiIgKyBzZWNvbmRzOwogICAgICAgICAgICByZXR1cm4gY3VycmVudGRhdGU7CiAgICAgICAgfQoKICAgICAgICB2YXIgcmFuZG9tID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoTWF0aC5yYW5kb20oKSAqIDEwMDAwKSArIChuZXcgRGF0ZSgpKS52YWx1ZU9mKCk7CiAgICAgICAgfTsKCiAgICAgICAgdmFyIGxvYWRTY3JpcHQgPSBmdW5jdGlvbiAodXJsLCBjYikgewogICAgICAgICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CiAgICAgICAgICAgIHNjcmlwdC5jaGFyc2V0ID0gIlVURi04IjsKICAgICAgICAgICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTsKCiAgICAgICAgICAgIC8vIOWvuWdlZXRlc3TnmoTpnZnmgIHotYTmupDmt7vliqAgY3Jvc3NPcmlnaW4KICAgICAgICAgICAgaWYgKC9zdGF0aWNcLmdlZXRlc3RcLmNvbS9nLnRlc3QodXJsKSkgewogICAgICAgICAgICAgICAgc2NyaXB0LmNyb3NzT3JpZ2luID0gImFub255bW91cyI7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHNjcmlwdC5vbmVycm9yID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgY2IodHJ1ZSk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHZhciBsb2FkZWQgPSBmYWxzZTsKICAgICAgICAgICAgc2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBpZiAoIWxvYWRlZCAmJgogICAgICAgICAgICAgICAgICAgICghc2NyaXB0LnJlYWR5U3RhdGUgfHwKICAgICAgICAgICAgICAgICAgICAgICAgImxvYWRlZCIgPT09IHNjcmlwdC5yZWFkeVN0YXRlIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICJjb21wbGV0ZSIgPT09IHNjcmlwdC5yZWFkeVN0YXRlKSkgewoKICAgICAgICAgICAgICAgICAgICBsb2FkZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBjYihmYWxzZSk7CiAgICAgICAgICAgICAgICAgICAgfSwgMCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHNjcmlwdC5zcmMgPSB1cmw7CiAgICAgICAgICAgIGhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTsKICAgICAgICB9OwoKICAgICAgICB2YXIgbm9ybWFsaXplRG9tYWluID0gZnVuY3Rpb24gKGRvbWFpbikgewogICAgICAgICAgICAvLyBzcGVjaWFsIGRvbWFpbjogdWVtcy5zeXN1LmVkdS5jbi9qd3h0L2dlZXRlc3QvCiAgICAgICAgICAgIC8vIHJldHVybiBkb21haW4ucmVwbGFjZSgvXmh0dHBzPzpcL1wvfFwvLiokL2csICcnKTsgdWVtcy5zeXN1LmVkdS5jbgogICAgICAgICAgICByZXR1cm4gZG9tYWluLnJlcGxhY2UoL15odHRwcz86XC9cL3xcLyQvZywgJycpOyAvLyB1ZW1zLnN5c3UuZWR1LmNuL2p3eHQvZ2VldGVzdAogICAgICAgIH07CiAgICAgICAgdmFyIG5vcm1hbGl6ZVBhdGggPSBmdW5jdGlvbiAocGF0aCkgewogICAgICAgICAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC9cLysvZywgJy8nKTsKICAgICAgICAgICAgaWYgKHBhdGguaW5kZXhPZignLycpICE9PSAwKSB7CiAgICAgICAgICAgICAgICBwYXRoID0gJy8nICsgcGF0aDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcGF0aDsKICAgICAgICB9OwogICAgICAgIHZhciBub3JtYWxpemVRdWVyeSA9IGZ1bmN0aW9uIChxdWVyeSkgewogICAgICAgICAgICBpZiAoIXF1ZXJ5KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJyc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHEgPSAnPyc7CiAgICAgICAgICAgIG5ldyBfT2JqZWN0KHF1ZXJ5KS5fZWFjaChmdW5jdGlvbiAoa2V5LCB2YWx1ZSkgewogICAgICAgICAgICAgICAgaWYgKGlzU3RyaW5nKHZhbHVlKSB8fCBpc051bWJlcih2YWx1ZSkgfHwgaXNCb29sZWFuKHZhbHVlKSkgewogICAgICAgICAgICAgICAgICAgIHEgPSBxICsgZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpICsgJyYnOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgaWYgKHEgPT09ICc/JykgewogICAgICAgICAgICAgICAgcSA9ICcnOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBxLnJlcGxhY2UoLyYkLywgJycpOwogICAgICAgIH07CiAgICAgICAgdmFyIG1ha2VVUkwgPSBmdW5jdGlvbiAocHJvdG9jb2wsIGRvbWFpbiwgcGF0aCwgcXVlcnkpIHsKICAgICAgICAgICAgZG9tYWluID0gbm9ybWFsaXplRG9tYWluKGRvbWFpbik7CgogICAgICAgICAgICB2YXIgdXJsID0gbm9ybWFsaXplUGF0aChwYXRoKSArIG5vcm1hbGl6ZVF1ZXJ5KHF1ZXJ5KTsKICAgICAgICAgICAgaWYgKGRvbWFpbikgewogICAgICAgICAgICAgICAgdXJsID0gcHJvdG9jb2wgKyBkb21haW4gKyB1cmw7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB1cmw7CiAgICAgICAgfTsKCiAgICAgICAgdmFyIGxvYWQgPSBmdW5jdGlvbiAoY29uZmlnLCBzZW5kLCBwcm90b2NvbCwgZG9tYWlucywgcGF0aCwgcXVlcnksIGNiKSB7CiAgICAgICAgICAgIHZhciB0cnlSZXF1ZXN0ID0gZnVuY3Rpb24gKGF0KSB7CgogICAgICAgICAgICAgICAgdmFyIHVybCA9IG1ha2VVUkwocHJvdG9jb2wsIGRvbWFpbnNbYXRdLCBwYXRoLCBxdWVyeSk7CiAgICAgICAgICAgICAgICBsb2FkU2NyaXB0KHVybCwgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0ID49IGRvbWFpbnMubGVuZ3RoIC0gMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2IodHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXBvcnQgZ2V0dHlwZSBlcnJvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbmQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuZXJyb3JfY29kZSA9IDUwODsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gcHJvdG9jb2wgKyBkb21haW5zW2F0XSArIHBhdGg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwb3J0RXJyb3IoY29uZmlnLCB1cmwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5UmVxdWVzdChhdCArIDEpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2IoZmFsc2UpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9OwogICAgICAgICAgICB0cnlSZXF1ZXN0KDApOwogICAgICAgIH07CgoKICAgICAgICB2YXIganNvbnAgPSBmdW5jdGlvbiAoZG9tYWlucywgcGF0aCwgY29uZmlnLCBjYWxsYmFjaykgewogICAgICAgICAgICBpZiAoaXNPYmplY3QoY29uZmlnLmdldExpYikpIHsKICAgICAgICAgICAgICAgIGNvbmZpZy5fZXh0ZW5kKGNvbmZpZy5nZXRMaWIpOwogICAgICAgICAgICAgICAgY2FsbGJhY2soY29uZmlnKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoY29uZmlnLm9mZmxpbmUpIHsKICAgICAgICAgICAgICAgIGNhbGxiYWNrKGNvbmZpZy5fZ2V0X2ZhbGxiYWNrX2NvbmZpZygpKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGNiID0gImdlZXRlc3RfIiArIHJhbmRvbSgpOwogICAgICAgICAgICB3aW5kb3dbY2JdID0gZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgIGlmIChkYXRhLnN0YXR1cyA9PSAnc3VjY2VzcycpIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhLmRhdGEpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZGF0YS5zdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soY29uZmlnLl9nZXRfZmFsbGJhY2tfY29uZmlnKCkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgd2luZG93W2NiXSA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHdpbmRvd1tjYl07CiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGxvYWQoY29uZmlnLCB0cnVlLCBjb25maWcucHJvdG9jb2wsIGRvbWFpbnMsIHBhdGgsIHsKICAgICAgICAgICAgICAgIGd0OiBjb25maWcuZ3QsCiAgICAgICAgICAgICAgICBjYWxsYmFjazogY2IKICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGNvbmZpZy5fZ2V0X2ZhbGxiYWNrX2NvbmZpZygpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgdmFyIHJlcG9ydEVycm9yID0gZnVuY3Rpb24gKGNvbmZpZywgdXJsKSB7CiAgICAgICAgICAgIGxvYWQoY29uZmlnLCBmYWxzZSwgY29uZmlnLnByb3RvY29sLCBbJ21vbml0b3IuZ2VldGVzdC5jb20nXSwgJy9tb25pdG9yL3NlbmQnLCB7CiAgICAgICAgICAgICAgICB0aW1lOiBub3dEYXRlKCksCiAgICAgICAgICAgICAgICBjYXB0Y2hhX2lkOiBjb25maWcuZ3QsCiAgICAgICAgICAgICAgICBjaGFsbGVuZ2U6IGNvbmZpZy5jaGFsbGVuZ2UsCiAgICAgICAgICAgICAgICBwdDogcHQsCiAgICAgICAgICAgICAgICBleGNlcHRpb25fdXJsOiB1cmwsCiAgICAgICAgICAgICAgICBlcnJvcl9jb2RlOiBjb25maWcuZXJyb3JfY29kZQogICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7IH0pCiAgICAgICAgfQoKICAgICAgICB2YXIgdGhyb3dFcnJvciA9IGZ1bmN0aW9uIChlcnJvclR5cGUsIGNvbmZpZykgewogICAgICAgICAgICB2YXIgZXJyb3JzID0gewogICAgICAgICAgICAgICAgbmV0d29ya0Vycm9yOiAn572R57uc6ZSZ6K+vJywKICAgICAgICAgICAgICAgIGd0VHlwZUVycm9yOiAnZ3TlrZfmrrXkuI3mmK/lrZfnrKbkuLLnsbvlnosnCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRXJyb3IgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgICAgIGNvbmZpZy5vbkVycm9yKGVycm9yc1tlcnJvclR5cGVdKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcnNbZXJyb3JUeXBlXSk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICB2YXIgZGV0ZWN0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gd2luZG93LkdlZXRlc3QgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImd0X2xpYiIpOwogICAgICAgIH07CgogICAgICAgIGlmIChkZXRlY3QoKSkgewogICAgICAgICAgICBzdGF0dXMuc2xpZGUgPSAibG9hZGVkIjsKICAgICAgICB9CgogICAgICAgIHdpbmRvdy5pbml0R2VldGVzdCA9IGZ1bmN0aW9uICh1c2VyQ29uZmlnLCBjYWxsYmFjaykgewoKICAgICAgICAgICAgdmFyIGNvbmZpZyA9IG5ldyBDb25maWcodXNlckNvbmZpZyk7CgogICAgICAgICAgICBpZiAodXNlckNvbmZpZy5odHRwcykgewogICAgICAgICAgICAgICAgY29uZmlnLnByb3RvY29sID0gJ2h0dHBzOi8vJzsKICAgICAgICAgICAgfSBlbHNlIGlmICghdXNlckNvbmZpZy5wcm90b2NvbCkgewogICAgICAgICAgICAgICAgY29uZmlnLnByb3RvY29sID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sICsgJy8vJzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gZm9yIEtGQwogICAgICAgICAgICBpZiAodXNlckNvbmZpZy5ndCA9PT0gJzA1MGNmZmVmNGFlNTdiNWQ1ZTUyOWZlYTk1NDBiMGQxJyB8fAogICAgICAgICAgICAgICAgdXNlckNvbmZpZy5ndCA9PT0gJzNiZDM4NDA4YWU0YWY5MjNlZDM2ZTEzODE5YjE0ZDQyJykgewogICAgICAgICAgICAgICAgY29uZmlnLmFwaXNlcnZlciA9ICd5dW1jaGluYS5nZWV0ZXN0LmNvbS8nOyAvLyBmb3Igb2xkIGpzCiAgICAgICAgICAgICAgICBjb25maWcuYXBpX3NlcnZlciA9ICd5dW1jaGluYS5nZWV0ZXN0LmNvbSc7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh1c2VyQ29uZmlnLmd0KSB7CiAgICAgICAgICAgICAgICB3aW5kb3cuR2VlR1QgPSB1c2VyQ29uZmlnLmd0CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh1c2VyQ29uZmlnLmNoYWxsZW5nZSkgewogICAgICAgICAgICAgICAgd2luZG93LkdlZUNoYWxsZW5nZSA9IHVzZXJDb25maWcuY2hhbGxlbmdlCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChpc09iamVjdCh1c2VyQ29uZmlnLmdldFR5cGUpKSB7CiAgICAgICAgICAgICAgICBjb25maWcuX2V4dGVuZCh1c2VyQ29uZmlnLmdldFR5cGUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGpzb25wKFtjb25maWcuYXBpX3NlcnZlciB8fCBjb25maWcuYXBpc2VydmVyXSwgY29uZmlnLnR5cGVQYXRoLCBjb25maWcsIGZ1bmN0aW9uIChuZXdDb25maWcpIHsKICAgICAgICAgICAgICAgIHZhciB0eXBlID0gbmV3Q29uZmlnLnR5cGU7CiAgICAgICAgICAgICAgICB2YXIgaW5pdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBjb25maWcuX2V4dGVuZChuZXdDb25maWcpOwogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG5ldyB3aW5kb3cuR2VldGVzdChjb25maWcpKTsKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgY2FsbGJhY2tzW3R5cGVdID0gY2FsbGJhY2tzW3R5cGVdIHx8IFtdOwogICAgICAgICAgICAgICAgdmFyIHMgPSBzdGF0dXNbdHlwZV0gfHwgJ2luaXQnOwogICAgICAgICAgICAgICAgaWYgKHMgPT09ICdpbml0JykgewogICAgICAgICAgICAgICAgICAgIHN0YXR1c1t0eXBlXSA9ICdsb2FkaW5nJzsKCiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzW3R5cGVdLnB1c2goaW5pdCk7CgogICAgICAgICAgICAgICAgICAgIGxvYWQoY29uZmlnLCB0cnVlLCBjb25maWcucHJvdG9jb2wsIG5ld0NvbmZpZy5zdGF0aWNfc2VydmVycyB8fCBuZXdDb25maWcuZG9tYWlucywgbmV3Q29uZmlnW3R5cGVdIHx8IG5ld0NvbmZpZy5wYXRoLCBudWxsLCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c1t0eXBlXSA9ICdmYWlsJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3IoJ25ldHdvcmtFcnJvcicsIGNvbmZpZyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNbdHlwZV0gPSAnbG9hZGVkJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYnMgPSBjYWxsYmFja3NbdHlwZV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2JzLmxlbmd0aDsgaSA8IGxlbjsgaSA9IGkgKyAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNiID0gY2JzW2ldOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGNiKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYigpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrc1t0eXBlXSA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHMgPT09ICJsb2FkZWQiKSB7CiAgICAgICAgICAgICAgICAgICAgaW5pdCgpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzID09PSAiZmFpbCIpIHsKICAgICAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKCduZXR3b3JrRXJyb3InLCBjb25maWcpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzID09PSAibG9hZGluZyIpIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3NbdHlwZV0ucHVzaChpbml0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgIH07CgoKICAgIH0pKHdpbmRvdyk7CgoKPC9zY3JpcHQ+Cgo8c2NyaXB0PgogICAgZnVuY3Rpb24gcmVjZWl2ZU1lc3NhZ2UoZ3QsIGNoYWxsZW5nZSkgewogICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN3YWl0Jykuc3R5bGUuZGlzcGxheSA9ICJibG9jayI7CiAgICAgICAgaW5pdEdlZXRlc3QoewogICAgICAgICAgICAvLyDku6XkuIsgNCDkuKrphY3nva7lj4LmlbDkuLrlv4XpobvvvIzkuI3og73nvLrlsJEKICAgICAgICAgICAgZ3Q6IGd0LAogICAgICAgICAgICBjaGFsbGVuZ2U6IGNoYWxsZW5nZSwKICAgICAgICAgICAgb2ZmbGluZTogZmFsc2UsIC8vIOihqOekuueUqOaIt+WQjuWPsOajgOa1i+aegemqjOacjeWKoeWZqOaYr+WQpuWuleacugogICAgICAgICAgICBuZXdfY2FwdGNoYTogdHJ1ZSwgLy8g55So5LqO5a6V5py65pe26KGo56S65piv5paw6aqM6K+B56CB55qE5a6V5py6CgogICAgICAgICAgICBwcm9kdWN0OiAicG9wdXAiLCAvLyDkuqflk4HlvaLlvI/vvIzljIXmi6zvvJpmbG9hdO+8jHBvcHVwCiAgICAgICAgICAgIHdpZHRoOiAiMzAwcHgiLAogICAgICAgICAgICBodHRwczogdHJ1ZQogICAgICAgIH0sIGhhbmRsZXIpOwogICAgfQogICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoY2FwdGNoYU9iaikgewogICAgICAgIGNhcHRjaGFPYmouYXBwZW5kVG8oJyNjYXB0Y2hhJyk7CiAgICAgICAgY2FwdGNoYU9iai5vblJlYWR5KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3dhaXQnKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgIH0pOwogICAgICAgIGNhcHRjaGFPYmoub25TdWNjZXNzKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNhcHRjaGFPYmouZ2V0VmFsaWRhdGUoKTsKICAgICAgICAgICAgd2luZG93Lk1haW5BcHBsaWNhdGlvbi5wb3N0TWVzc2FnZShKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICAgICAgICBjb2RlOjIwMCwKICAgICAgICAgICAgICAgIG1zZzonc3VjY2VzcycsCiAgICAgICAgICAgICAgICBkYXRhOnsKICAgICAgICAgICAgICAgICAgICBjaGFsbGVuZ2U6IHJlc3VsdC5nZWV0ZXN0X2NoYWxsZW5nZSwKICAgICAgICAgICAgICAgICAgICBzZWNjb2RlOiByZXN1bHQuZ2VldGVzdF9zZWNjb2RlLAogICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlOiByZXN1bHQuZ2VldGVzdF92YWxpZGF0ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSk7CiAgICAgICAgfSk7CiAgICAgICAgY2FwdGNoYU9iai5vbkVycm9yKGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgd2luZG93Lk1haW5BcHBsaWNhdGlvbi5wb3N0TWVzc2FnZShKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICAgICAgICBjb2RlOjEwMCwKICAgICAgICAgICAgICAgIG1zZzplLm1zZwogICAgICAgICAgICB9KSk7CiAgICAgICAgfSk7CiAgICB9Owo8L3NjcmlwdD4KCjwvaHRtbD4="""